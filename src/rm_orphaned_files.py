#!/bin/python3
# 2024 by Ton Smeele, Utrecht University

import sys
import time
import argparse

import icat
import pathdb
from drrods_common import *
import drrods_sql


def is_modified_last_24h(epoch_time):
    one_day = 86400  # seconds
    return time.time() - epoch_time < one_day 

def is_in_flight(replica_status):
    return not replica_status in [0, 1]


def host_check(targethost):
    pre = '''
# make sure the path pertain to this host
'''  
    fill = 'TARGETHOST="' + targethost + '"\n' 
    post = '''
THISHOST=`hostname -f`
if [ "${THISHOST}" != "${TARGETHOST}" ]; then
   echo "Error: the rm commands pertain to files on a different server"
   echo "Script should only be run on the host named: ${TARGETHOST}"
   exit 1
fi
echo "PRECONDITION OK: this script runs on the targeted host (${TARGETHOST})"
'''
    return pre + fill + post


def rm_file(path, dryrun=True):
    esc_path = bash_squote(path)
    del_flag = ''
    if not dryrun:
        del_flag = '-delete'
    return '''
find {} -maxdepth 0 -type f -mtime +1 -print {}
'''.format(esc_path, del_flag)


def main(args):
    db = load_dict(args.inputfile, SIGNATURE_ORPHAN_FILES)
    if not db:
        sys.exit(1)
    print_stderr("{} orphan data files for host {} have been loaded from the inputfile".format(db['file_paths'].size(), db['host']))
    


    unprocessed = 0
    processed = 0
    with open_w(cmd.outputfile) as f:
        f.write('#/bin/bash\n#generated by DrRods tooling\n# Disclaimer: Use at own risk\n')
        f.write(host_check(db['host']))
        if args.dryrun:
            f.write('echo "THIS IS A *DRYRUN*, SEE BELOW THE LIST OF FILES THAT WOULD BE DELETED"' + "\n")
        for path in db['file_paths'].iter():
            f.write(rm_file(path, args.dryrun) )
            processed = processed + 1

    print_stderr("Output bash command file written to {}".format(cmd.outputfile))




if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Prepares rm commands for data files that are not referenced by any replica')
    parser.add_argument('inputfile', metavar='<inputfile.bin>', 
            help='file with paths of orphan data files on a target host') 
    parser.add_argument('outputfile',nargs='?', metavar='<filename>|"-"',
            help='bash commands to rm datafiles will be written to this file')
    parser.add_argument('-d','--dryrun', action='store_true', dest='dryrun',
            help='produce an outputfile that can be executed as a dry-run')
    cmd = parser.parse_args()
    if not cmd.outputfile:
        cmd.outputfile = '-'
    main(cmd)



